{
  "name": "gulp-load-utils",
  "description": "Conveniently wrapped utility functions for working with gulp",
  "version": "0.0.4",
  "homepage": "http://github.com/DSKrepps/gulp-load-utils",
  "repository": {
    "type": "git",
    "url": "git://github.com/DSKrepps/gulp-load-utils.git"
  },
  "author": {
    "name": "Dylan Krepps",
    "email": "DSKrepps+npm@gmail.com",
    "url": "https://github.com/DSKrepps"
  },
  "main": "./index.js",
  "keywords": [
    "gulp",
    "gulpfriendly",
    "util"
  ],
  "devDependencies": {
    "mocha": "~1.17.0",
    "should": "~3.1.2",
    "mocha-lcov-reporter": "~0.0.1",
    "coveralls": "~2.7.0",
    "istanbul": "~0.2.3",
    "rimraf": "~2.2.5",
    "jshint": "~2.4.1",
    "buffer-equal": "0.0.0",
    "lodash.templatesettings": "~2.4.1",
    "event-stream": "~3.1.0",
    "chalk": "~0.4.0",
    "lodash.template": "~2.4.1",
    "lodash._reinterpolate": "~2.4.1",
    "vinyl": "~0.2.1",
    "through2": "~0.4.0",
    "dateformat": "~1.0.7-1.2.3",
    "multipipe": "~0.0.1",
    "minimist": "~0.0.5",
    "lazypipe": "~0.2.1",
    "vinyl-source-stream": "~0.1.1",
    "replace-ext": "~0.0.1"
  },
  "scripts": {
    "test": "mocha --reporter spec && jshint",
    "coveralls": "istanbul cover _mocha --report lcovonly -- -R spec && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "engines": {
    "node": ">= 0.9"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://raw.github.com/DSKrepps/gulp-load-utils/master/LICENSE"
    }
  ],
  "readme": "# gulp-load-utils [![Build Status][travis-image]][travis-url]\r\n\r\nRecommended Gulp utilities wrapped up conveniently without creating an unnecessary dependency tree.\r\n\r\nThis is a fork of [gulp-util](https://github.com/gulpjs/gulp-util), sharing much of the same code. Use instead of gulp-util to load only the utilities you want, as well as other recommended packages.\r\n\r\nYou'll need the devDependencies in your package.json for the utils you request, which are listed with each utlity below. If you try to use a utility which you hadn't requested, or you request one without its dependencies installed, an error will be thrown telling you what's missing.\r\n\r\n\r\n## Usage\r\n\r\n1. `npm install --save-dev gulp-load-utils`\r\n\r\n2. Also npm install or add to package.json the devDependencies you need, as listed below.\r\n\r\n3. Pass the properties of gutil you want to use like so:\r\n\r\n```javascript\r\nvar gutil = require('gulp-load-utils')(['colors', 'env', 'log', 'pipeline']);\r\n\r\n// Run `gulp --production`\r\nvar isProduction = gutil.env.production;\r\n\r\nif(isProduction) {\r\n  gutil.log( 'Building for', gutil.colors.magenta('production') );\r\n  gutil.beep();\r\n}\r\n// [gulp] [23:09:09] Building for production *system beep*\r\n```\r\n\r\nThis keeps your code cleaner and loads less dependencies as opposed to starting with:\r\n\r\n```javascript\r\nvar gutil = require('gulp-util');\r\nvar colors = require('chalk');\r\nvar env = require('minimist')(process.argv.slice(2));\r\nvar pipeline = require('multipipe');\r\n```\r\n\r\nSuggested usage with [gulp-load-plugins](https://github.com/jackfranklin/gulp-load-plugins):\r\n\r\n```javascript\r\nvar $ = require('gulp-load-plugins')();\r\nvar _ = $.loadUtils(['log', 'colors']);\r\n\r\n_.log( _.colors( ... ) );\r\n```\r\n\r\n\r\n### beep()\r\n\r\nTrigger a system beep. No dependencies, always present.\r\n\r\n\r\n### buffer(cb)\r\n\r\n[From gulp-util](https://github.com/gulpjs/gulp-util#buffercb).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>through2</td>\r\n</tr></table>\r\n\r\nThis is similar to es.wait but instead of buffering text into one string it buffers anything into an array (so very useful for file objects).\r\n\r\nReturns a stream that can be piped to.\r\n\r\nThe stream will emit one data event after the stream piped to it has ended. The data will be the same array passed to the callback.\r\n\r\nCallback is optional and receives two arguments: error and data\r\n\r\n```javascript\r\ngulp.src('stuff/*.js')\r\n  .pipe(gutil.buffer(function(err, files) {\r\n  \r\n  });\r\n```\r\n\r\n\r\n### colors\r\n\r\nAn instance of [chalk](https://github.com/sindresorhus/chalk).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>chalk</td>\r\n</tr></table>\r\n\r\nUse when logging values with `gutil.log`.\r\n\r\n```javascript\r\ngutil.log( gutil.colors.red('Red text!'));\r\n```\r\n\r\n\r\n### date\r\n\r\nAn instance of [node-dateformat](https://github.com/felixge/node-dateformat).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>dateformat</td>\r\n</tr></table>\r\n\r\nUsing `gutil.log` prefixes the output with this already, as `HH:MM:ss`.\r\n\r\n```javascript\r\nvar header = 'Compiled on ' + gutil.date('mmm d, yyyy h:MM:ss TT Z');\r\n// Compiled on Mar 7, 2014 5:09:09 PM EST\r\n```\r\n\r\n\r\n### defineSrc(filename)\r\n\r\nAn instance of [vinyl-source-stream](https://github.com/felixge/node-dateformat).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>vinyl-source-stream</td>\r\n</tr></table>\r\n\r\nUse to convert regular text streams to the vinyl file streams used by Gulp. Pass a fake filename/path to control the destination.\r\n\r\nSee the [watchify recipe](https://github.com/gulpjs/gulp/blob/master/docs/recipes/fast-browserify-builds-with-watchify.md) for an example.\r\n\r\n\r\n### env\r\n\r\nSee [minimist](https://github.com/substack/minimist).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>minimist</td>\r\n</tr></table>\r\n\r\n```javascript\r\n// Run `gulp --type production`\r\nvar isProduction = gutil.env.type === 'production';\r\n```\r\n\r\n\r\n### new File(obj)\r\n\r\nAn instance of [vinyl](https://github.com/wearefractal/vinyl).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>vinyl</td>\r\n</tr></table>\r\n\r\n```javascript\r\nvar file = new gutil.File({\r\n  base: join(__dirname, './fixtures/'),\r\n  cwd: __dirname,\r\n  path: join(__dirname, './fixtures/test.coffee')\r\n});\r\n```\r\n\r\n\r\n### isStream(obj)\r\n\r\nReturns true or false if an object is a stream. No dependencies, always present.\r\n\r\n\r\n### isBuffer(obj)\r\n\r\nReturns true or false if an object is a Buffer. No dependencies, always present.\r\n\r\n\r\n### lazypipe()\r\n\r\nAn instance of [lazypipe](https://github.com/OverZealous/lazypipe).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>lazypipe</td>\r\n</tr></table>\r\n\r\nCombine streams in a reusable manner.\r\n\r\n```javascript\r\nvar jsTasks = gutil.lazypipe()\r\n  .pipe(compileJS, jsOpts)\r\n  .pipe(minifyJS)\r\n;\r\n\r\ngulp.task('scripts', function() {\r\n  return gulp.src('src/**/*.js')\r\n    .pipe(jsTasks())\r\n    .pipe(gulp.dest('dist/'));\r\n});\r\n```\r\n\r\n\r\n### log(msg...)\r\n\r\n[From gulp-util](https://github.com/gulpjs/gulp-util#logmsg).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>chalk, dateformat</td>\r\n</tr></table>\r\n\r\nPrefixes the message with `[gulp]` and the current time. Multiple arguments are joined with a space, just like `console.log`. Use the right colors for values.\r\n\r\n```\r\nvalues (files, module names, etc.) = magenta\r\nnumbers (times, counts, etc) = cyan\r\n```\r\n\r\n```javascript\r\ngutil.log( 'Something happened in', gutil.colors.magenta(file), 'after', gutil.colors.cyan(count), 'things');\r\n```\r\n\r\n\r\n### noop()\r\n\r\n[From gulp-util](https://github.com/gulpjs/gulp-util#noop).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>through2</td>\r\n</tr></table>\r\n\r\nReturns a stream that does nothing but pass data straight through.\r\n\r\n```javascript\r\ngulp.task('scripts', function() {\r\n  gulp.src('src/**/*.js')\r\n    .pipe(isProduction ? minifyJS() : gutil.noop())\r\n    .pipe(gulp.dest('dist/');\r\n});\r\n```\r\n\r\n\r\n### pipeline(streams...)\r\n\r\n An instance of [multipipe](https://github.com/segmentio/multipipe).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>multipipe</td>\r\n</tr></table>\r\n\r\nUse to combine streams, apply events to them. For a reusable approach use `gutil.lazypipe`.\r\n\r\n```javascript\r\ngulp.task('scripts', function() {\r\n  return gutil.pipeline(\r\n\r\n    gulp.src('src/**/*.js'),\r\n    compileJS(),\r\n    minifyJS(),\r\n    gulp.dest('dist/')\r\n\r\n  ).on('error', errHandler);\r\n});\r\n```\r\n\r\n\r\n### new PluginError(pluginName, message[, options])\r\n\r\n[From gulp-util](https://github.com/gulpjs/gulp-util#new-pluginerrorpluginname-message-options).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>chalk</td>\r\n</tr></table>\r\n\r\n- pluginName should be the module name of your plugin\r\n- message can be a string or an existing error\r\n- By default the stack will not be shown. Set `options.showStack` to true if you think the stack is important for your error.\r\n- If you pass an error in as the message the stack will be pulled from that, otherwise one will be created.\r\n\r\nThese are all acceptable forms of instantiation:\r\n\r\n```javascript\r\nvar err = new gutil.PluginError('test', {\r\n  message: 'something broke'\r\n});\r\n\r\nvar err = new gutil.PluginError({\r\n  plugin: 'test',\r\n  message: 'something broke'\r\n});\r\n\r\nvar err = new gutil.PluginError('test', 'something broke');\r\n\r\nvar err = new gutil.PluginError('test', 'something broke', {showStack: true});\r\n\r\nvar existingError = new Error('OMG');\r\nvar err = new gutil.PluginError('test', existingError, {showStack: true});\r\n```\r\n\r\n\r\n### replaceExtension(path, newExtension)\r\n\r\nAn instance of [replace-ext](https://github.com/wearefractal/replace-ext).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>replace-ext</td>\r\n</tr></table>\r\n\r\nReplaces a file extension in a path. Returns the new path.\r\n\r\n```javascript\r\nvar filepath = '/some/dir/file.js';\r\nvar newpath = replaceExt(filepath, '.coffee');// /some/dir/file.coffee\r\n```\r\n\r\n\r\n### template\r\n\r\n[From gulp-util](https://github.com/gulpjs/gulp-util#templatestring-data).\r\n\r\n<table><tr>\r\n<td>devDependencies</td><td>lodash.template, lodash._reinterpolate</td>\r\n</tr></table>\r\n\r\nThis is a lodash.template function wrapper. You must pass in a valid gulp file object so it is available to the user or it will error. You can not configure any of the delimiters. Look at the [lodash docs](http://lodash.com/docs#template) for more info.\r\n\r\n````javascript\r\nvar opt = {\r\n  name: 'todd',\r\n  file: someGulpFile\r\n};\r\ngutil.template('test <%= name %> <%= file.path %>', opt) // test todd /js/hi.js\r\n```\r\n\r\n[travis-url]: https://travis-ci.org/DSKrepps/gulp-load-utils\r\n[travis-image]: https://travis-ci.org/DSKrepps/gulp-load-utils.png?branch=master\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/DSKrepps/gulp-load-utils/issues"
  },
  "_id": "gulp-load-utils@0.0.4",
  "dist": {
    "shasum": "eea03dc99334e965dd2e69d33131d563ba28ebbc"
  },
  "_from": "gulp-load-utils@",
  "_resolved": "https://registry.npmjs.org/gulp-load-utils/-/gulp-load-utils-0.0.4.tgz"
}
